AWSTemplateFormatVersion: "2010-09-09"
Transform: AWS::Serverless-2016-10-31

Parameters:
  ReplicateApiToken:
    Type: String
    Description: API Token for replicate
  DBSecretsID:
    Type: String
    Description: The ID of the Secrets Manager secret containing the RDS database credentials.
  EmailIdentity:
    Type: String
    Description: The email identity for sending emails using SES.
  VpcSecurityGroupId:
    Type: String
    Description: The ID of the security group for Lambda functions.
  VpcSubnet1:
    Type: String
    Description: The ID of the first subnet for Lambda functions.

Globals:
  Function:
    Runtime: nodejs18.x
    Timeout: 30
    MemorySize: 128
    Environment:
      Variables:
        REPLICATE_API_TOKEN: !Ref ReplicateApiToken
        DB_SECRETS_ID: !Ref DBSecretsID
        DB_NAME: "inventory"
        SES_FROM_ADDRESS: !Ref EmailIdentity
        BUCKET_NAME: !Ref PublicS3Bucket
        BUCKET_URL: !Join
          - ''
          - - 'https://'
            - !GetAtt PublicS3Bucket.DomainName
    VpcConfig:
      SecurityGroupIds:
        - !Ref VpcSecurityGroupId
      SubnetIds:
        - !Ref VpcSubnet1

Resources:
  
  # API Gateway
  Api:
    Type: AWS::Serverless::Api
    Properties:
      StageName: prod
      Cors:
        AllowMethods: "'POST, GET, PATCH, DELETE, OPTIONS'"
        AllowHeaders: "'*'"
        AllowOrigin: "'*'"
      GatewayResponses:
        UNAUTHORIZED:
          StatusCode: 401
          ResponseParameters:
            Headers:
              Access-Control-Allow-Headers: "'*'"
              Access-Control-Allow-Origin: "'*'"
          ResponseTemplates:
            application/json: '{"error":"Unauthorized"}'
        AUTHORIZER_FAILURE:
          StatusCode: 403
          ResponseParameters:
            Headers:
              Access-Control-Allow-Headers: "'*'"
              Access-Control-Allow-Origin: "'*'"
          ResponseTemplates:
            application/json: '{"error":"Auth Failed"}'
      Auth:
        Authorizers:
          CognitoAuthorizer:
            UserPoolArn: !GetAtt UserPool.Arn

  # Cognito User Pool
  UserPool:
    Type: AWS::Cognito::UserPool
    Properties:
      UserPoolName: !Sub ${AWS::StackName}-user-pool
      AdminCreateUserConfig:
        AllowAdminCreateUserOnly: true
      AutoVerifiedAttributes:
        - email

  # S3 Bucket
  PublicS3Bucket:
    Type: AWS::S3::Bucket
    Properties:
      PublicAccessBlockConfiguration:
        BlockPublicAcls: false
      OwnershipControls:
        Rules:
          - ObjectOwnership: ObjectWriter
      CorsConfiguration:
        CorsRules:
          - AllowedHeaders:
              - '*'
            AllowedMethods:
              - GET
            AllowedOrigins:
              - '*'
            ExposedHeaders:
              - Date
            Id: myCORSRuleId1
            MaxAge: 3600

  # GeneratePresignedUrl Lambda Function
  OcrFunction:
    Type: AWS::Serverless::Function
    Properties:
      CodeUri: dist/ocr
      Handler: app.handler
      Policies:
        - VPCAccessPolicy: {}
        - AWSSecretsManagerGetSecretValuePolicy:
            SecretArn: "*"
        - Version: '2012-10-17'
          Statement:
            - Effect: Allow
              Action:
                - s3:PutObject
              Resource: !Sub arn:aws:s3:::${PublicS3Bucket}/*
      Events:
        GetOrCreateOCR:
          Type: Api
          Properties:
            RestApiId: !Ref Api
            Path: /ocr
            Method: any
        OperateOCR:
          Type: Api
          Properties:
            RestApiId: !Ref Api
            Path: /ocr/{proxy+}
            Method: any

  # Material CRUD
  MaterialFunction:
    Type: AWS::Serverless::Function
    Properties:
      CodeUri: dist/material
      Handler: app.handler
      Policies:
        - VPCAccessPolicy: {}
        - AWSSecretsManagerGetSecretValuePolicy:
            SecretArn: "*"
      Events:
        GetMaterial:
          Type: Api
          Properties:
            RestApiId: !Ref Api
            Path: /material
            Method: get
        GetMaterialSuppliers:
          Type: Api
          Properties:
            RestApiId: !Ref Api
            Path: /material/supplier
            Method: get
        GetMaterialForAddOn:
          Type: Api
          Properties:
            RestApiId: !Ref Api
            Path: /material/add-on
            Method: get

  # StockShortage CRUD
  StockShortageFunction:
    Type: AWS::Serverless::Function
    Properties:
      CodeUri: dist/stockShortage
      Handler: app.handler
      Policies:
        - VPCAccessPolicy: {}
        - AWSSecretsManagerGetSecretValuePolicy:
            SecretArn: "*"
        - SESCrudPolicy:
            IdentityName: "*"
      Events:
        Get:
          Type: Api
          Properties:
            RestApiId: !Ref Api
            Path: /material/shortage
            Method: Any
        Management:
          Type: Api
          Properties:
            RestApiId: !Ref Api
            Path: /material/shortage/{proxy+}
            Method: Any

  # GetStockFunction:
  #   Type: AWS::Serverless::Function
  #   Properties:
  #     CodeUri: dist/getStock
  #     Handler: app.handler
  #     Policies:
  #       - VPCAccessPolicy: {}
  #       - AWSSecretsManagerGetSecretValuePolicy:
  #           SecretArn: "*"
  #     Events:
  #       GetStock:
  #         Type: Api
  #         Properties:
  #           RestApiId: !Ref Api
  #           Auth:
  #             Authorizer: CognitoAuthorizer
  #           Path: /material/stock
  #           Method: get

  # UpdateStockFunction:
  #   Type: AWS::Serverless::Function
  #   Properties:
  #     CodeUri: dist/updateStock
  #     Handler: app.handler
  #     Policies:
  #       - VPCAccessPolicy: {}
  #       - AWSSecretsManagerGetSecretValuePolicy:
  #           SecretArn: "*"
  #     Events:
  #       UpdateStock:
  #         Type: Api
  #         Properties:
  #           RestApiId: !Ref Api
  #           Auth:
  #             Authorizer: CognitoAuthorizer
  #           Path: /material/{material_id}/stock
  #           Method: patch

  # AlertStockFunction:
  #   Type: AWS::Serverless::Function
  #   Properties:
  #     CodeUri: dist/alertStock
  #     Handler: app.handler
  #     Policies:
  #       - VPCAccessPolicy: {}
  #       - AWSSecretsManagerGetSecretValuePolicy:
  #           SecretArn: "*"
  #       - SESCrudPolicy:
  #           IdentityName: "*"
  #     Events:
  #       AlertShop1:
  #         Type: Schedule
  #         Properties:
  #           Schedule: cron(10 7 * * ? *)
  #           Input: '{"shopID": 1, "alertEmails": "chenye94@qq.com,337104203@qq.com"}'

Outputs:
  ApiEndpoint:
    Description: "API Gateway 端点"
    Value: !Sub "https://${Api}.execute-api.${AWS::Region}.amazonaws.com/prod"

  UserPoolId:
    Description: "Cognito 用户池 ID"
    Value: !Ref UserPool

  S3BucketURL:
    Value: !Join
      - ''
      - - 'https://'
        - !GetAtt PublicS3Bucket.DomainName
    Description: URL of public S3 bucket
